"""The snake make file that controls the process, imported by a python warper"""
import os
import glob
import pathlib
import pandas as pd
from join_asvbins.utils.seq_matching import combine_mbstats_barrnap, \
    filter_fasta_from_headers, filter_from_mbstats, stage1_statistics, \
    stage2_statistics

LOCALY_COMBINED_BINS = "all_bins_combined"

search_tool = 'blast' if config['blast'] else 'mmseqs'
output_name = config.get('output')
bins_path = config.get('bins')
asv_seqs_path = config.get('asv_seqs')
fasta_extention = config.get('fasta_extention')
generic_16s_path = config.get('generic_16s')
s1_mmseqs_sensitivity = config.get('s1_mmseqs_sensitivity')
s2_mmseqs_sensitivity = config.get('s2_mmseqs_sensitivity')
s1_min_pct_id = config.get('s1_min_pct_id')
s2_min_pct_id = config.get('s2_min_pct_id')
s1_min_length = config.get('s1_min_length')
s2_min_length = config.get('s2_min_length')
s2_min_length_pct = config.get('min_length_pct')
s2_max_gaps = config.get('max_gaps')
s2_max_missmatch = config.get('max_missmatch')


# Set the appropriate output, This can be moved
if os.path.isdir(bins_path):
    bins_folder = bins_path
    path_to_combined_bins = LOCALY_COMBINED_BINS
else:
    bins_folder = "None"
    path_to_combined_bins = bins_path


# TODO fix up tab files describing the matches
rule all:
    input:
        f"{output_name}_16s_bin_finds_stats.tab",
        f"{output_name}_16s_bin_finds_seqs.fa",
        f"{output_name}_asv_bin_matches_stats.tab",
        f"{output_name}_asv_bin_matches_seqs.fa"


rule search1_16s_bin_finds:
    input:
        f"{output_name}_16s_bin_finds_stats.tab",
        f"{output_name}_16s_bin_finds_seqs.fa"


rule search2_asv_bin_matches:
    input:
        f"{output_name}_asv_bin_matches_stats.tab",
        f"{output_name}_asv_bin_matches_seqs.fa"


rule stage1_set_output_fasta:
    input:
        f"barrnap_and_{search_tool}_asvs.fna"
    output:
        protected("{output}_asv_bin_matches_seqs.fa")
    shell:
        """
        cp {input} {output}
        """

rule stage1_set_output_stats:
    input:
        f"stage1_asvs_{search_tool}.tab",
        f"barrnap_stats_excluding_{search_tool}.tab"

    output:
        protected("{output}_asv_bin_matches_stats.tab")
    run:
        stage1_statistics(input[0], input[1], output, search_tool)

rule stage2_set_output_fasta:
    input:
        f"barrnap_and_{search_tool}_asvs_matching_seqs.fna"
    output:
        protected("{output}_16s_bin_finds_seqs.fa")
    shell:
        """
        cp {input} {output}
        """

rule stage2_set_output_stats:
    input:
        f"stage2_asvs_{search_tool}.tab"
    output:
        protected("{output}_16s_bin_finds_stats.tab")
    run:
        stage2_statistics(input, output, search_tool)

rule combine_barrnap_with_other: # where other is blast or mmseqs
    # TODO change tool to search_tool
    input:
        other_fasta_path = "stage1_asvs_{tool}_matches.fna",
        other_stats_path =  "stage1_asvs_{tool}.tab",
        barrnap_fasta_path = "barrnap_fastafile-16S.fna"
    output:
        out_fasta_path = "barrnap_and_{tool}_asvs.fna",
        out_barstats_path = "barrnap_stats_excluding_{tool}.tab"
    run:
        combine_mbstats_barrnap(input['other_fasta_path'],
                                input['other_stats_path'],
                                input['barrnap_fasta_path'],
                                output['out_fasta_path'],
                                output['out_barstats_path'],
                                min_pct_id = s1_min_pct_id,
                                min_length = s1_min_length)

rule combine_input_fa:
    input:
        bins_folder
    output:
        LOCALY_COMBINED_BINS
    run:
       input_list = glob.glob(
                       os.path.join(input, "*.{fasta_extention}"))
       if fasta_extention.endswith('gz'):
               shell("gzip -cd  {input_list} >> {output}")
       else:
               shell("cat {input_list} >> {output}")


rule mmseqs_stage1_search:
    input:
        path_to_combined_bins,
        generic_16s_path # Query
    output:
        directory("mmseqs_stage1_db"),
        "stage1_asvs_mmseqs.tab"
    threads: workflow.cores
    run:
       # TODO Split out the db creation, into other rouls if it makes sense seeing as you may need to limit cores
       # TODO put this in a better format
       breakpoint()
       shell("mkdir {output[0]}")
       shell("mmseqs createdb {input[0]} {output[0]}/target")
       shell("mmseqs createdb {input[1]} {output[0]}/query")
       shell("mmseqs search --search-type 3"
             " {output[0]}/query"
             " {output[0]}/target"
             " {output[0]}/mmseqs_out"
             " temp"
             " --threads {threads}"
            f" -s {s2_mmseqs_sensitivity}"
             )
       #   f" {s1_mmseqs_sensitivity} \n" # Add sensitivity setting as f string
       shell("mmseqs convertalis "
             " --format-output \'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen,tlen\'"
             " {output[0]}/query "
             " {output[0]}/target "
             " {output[0]}/mmseqs_out "
             " {output[1]}")

rule blast_stage1_search:
    input:
        path_to_combined_bins,
        generic_16s_path # Query
    output:
        directory("blast_stage1_db"),
        "stage1_asvs_blast.tab"
    run:
       shell("mkdir {output[0]}")
       shell("makeblastdb -dbtype nucl -in {input[0]} -out {output[0]}/blast_db")
       shell("blastn -db {output[0]}/blast_db -out {output[1]} -query {input[1]} -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\"")


rule pullseq_header_name:
    input:
        path_to_combined_bins,
        "{level}_asvs_{tool}.tab"
    output:
        "{level}_asvs_{tool}_matches.fna"
    run:
       shell("awk '{{print $2}}' {input[1]} > {wildcards.level}_asvs_{wildcards.tool}_headers.txt")
       headers = pd.read_csv(f"{wildcards.level}_asvs_{wildcards.tool}_headers.txt",
                          sep='\n', header=None, names=["head"])["head"].values
       filter_fasta_from_headers(f"{input[0]}", f"{output}", headers)


rule mmseqs_stage2_search:
    input:
       "barrnap_and_mmseqs_asvs.fna", # Target
       asv_seqs_path # Query
    output:
       directory("mmseqs_stage2_db"),
       "stage2_asvs_mmseqs.tab"
    threads: workflow.cores
    # Add sensitivity seting as f string
    run:
       # TODO Split out the db creation, into other rouls if it makes sense seeing as you may need to limit cores
       # TODO put this in a better format
       shell("mkdir {output[0]}")
       shell("mmseqs createdb {input[0]} {output[0]}/target")
       shell("mmseqs createdb {input[1]} {output[0]}/query")
       shell("mmseqs search --search-type 3"
             " {output[0]}/query"
             " {output[0]}/target"
             " {output[0]}/mmseqs_out"
             " temp"
            f" -s {s2_mmseqs_sensitivity}"
             )
       #   f" {s1_mmseqs_sensitivity} \n" # Add sensitivity setting as f string
       shell("mmseqs convertalis "
             " --format-output \'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen,tlen\'"
             " {output[0]}/query "
             " {output[0]}/target "
             " {output[0]}/mmseqs_out "
             " {output[1]}")


rule stage2_filtering:
    input:
       "stage2_asvs_{tool}.tab",
       "barrnap_and_{tool}_asvs.fna"
    output:
       "barrnap_and_{tool}_asvs_matching_seqs.fna"
    run:
       filter_from_mbstats(
                       stats_file=input[0],
                       fasta_file_in=input[1],
                       fasta_file_out=output[0],
                       min_pct_id=s2_min_pct_id,
                       min_length=s2_min_length,
                       min_length_pct=s2_min_length_pct,
                       max_gaps=s2_max_gaps,
                       max_missmatch=s2_max_missmatch
                       )


rule blast_stage2_search:
    input:
       "barrnap_and_blast_asvs.fna", # Target
        asv_seqs_path, # Query
    output:
        directory("blast_stage2_db"),
        "stage2_asvs_blast.tab"
    shell:
        """
        mkdir {output[0]}
        makeblastdb -dbtype nucl -in {input[0]} -out {output[0]}/blast_db
        blastn -db {output[0]}/blast_db -out {output[1]} -query {input[1]} \
        -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\"
        """


rule run_barrnap:
    input:
        path_to_combined_bins
    output:
        "barrnap_fastafile-16S.fna"
    threads: workflow.cores
    #TODO Get the stats from the gff file
    shell:
        """
        barrnap --threads {threads} {input} > rrna.gff
        grep \"16S\" rrna.gff > 16S-gff.gff
        bedtools getfasta -fi {input} -bed 16S-gff.gff -fo 16S-fasta.fna
        grep \">\" 16S-fasta.fna | sed 's/>//g' > 16S-id.txt
        xargs samtools faidx 16S-fasta.fna < 16S-id.txt > {output}
        """





