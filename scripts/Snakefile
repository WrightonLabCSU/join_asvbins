"""The snake make file that controls the process, imported by a python warper"""
import os
import glob
import pathlib
import pandas as pd
from asv_to_bins.extract_16s import combine_mbstats_barrnap, filter_fasta_from_headers

LOCALY_COMBINED_BINS = "all_bins_combined"
# !snakemake combine_input_fa --directory '../results/snakemake_test_2/' --config input_fa_folder=/home/projects/16s_to_bins_project/data/salmonella/ input_fna=test.fna --cores 2

# DONE bins_folder=\'{bins_folder}\'"
# DONE all_bin_seqs_path=\'{all_bin_seqs_path}\'"
# DONE asv_seqs_path=\'{asv_seqs_path}\'"
# DONE generic_16s=\'{generic_16s}\'"
# DONE tool=\'{tool}\'"
# TODO s1_min_pct_id=s1_min_pct_id"
# TODO s2_min_pct_id=s2_min_pct_id"
# TODO s1_min_length=s1_min_length"
# TODO s2_min_length=s2_min_length"
# DONE s1_mmseqs_sensitivity=s1_mmseqs_sensitivity"
# DONE s2_mmseqs_sensitivity=s2_mmseqs_sensitivity"
# TODO min_length_pct=min_length_pct"
# TODO max_gaps=max_gaps"


# This will eventually move the output file to a designated location
rule all:
    input:
       f"stage2_asvs_{config['tool']}.tab"

rule no_asvs:
    input:
       f"barrnap_and_{config['tool']}_asvs.fna"

rule combine_barrnap_with_other: # where other is blast or mmseqs
    input:
        other_fasta_path = "stage1_asvs_{tool}_matches.fna",
        other_stats_path =  "stage1_asvs_{tool}.tab",
        barrnap_fasta_path = "barrnap_fastafile-16S.fna"
    output:
        out_fasta_path = "barrnap_and_{tool}_asvs.fna"
    run:
        combine_mbstats_barrnap(input['other_fasta_path'], input['other_stats_path'],
                input['barrnap_fasta_path'], output['out_fasta_path'])



path_to_combined_bins = LOCALY_COMBINED_BINS if config['all_bin_seqs_path'] == 'None' else config['all_bin_seqs_path']
rule combine_input_fa:
    input:
        "NA" if config['bins_folder'] == 'None' else glob.glob(os.path.join(config['bins_folder'], "*.fa*"))
    output:
        LOCALY_COMBINED_BINS
    run:
       for i in input:
           if i.endswith(".fa"):
               shell("cat {i} >> {output}")
           elif i.endswith('.fa.gz'):
               shell("gzip -cd  {i} >> {output}")

rule mmseqs_stage1_search:
    input:
        path_to_combined_bins,
        config['generic_16s'] # Query
    output:
        directory("mmseqs_stage1_db"),
        "stage1_asvs_mmseqs.tab"
    threads: workflow.cores
    run:
       shell("mkdir {output[0]}")
       shell("mmseqs createdb {input[0]} {output[0]}/target")
       shell("mmseqs createdb {input[1]} {output[0]}/query")
       shell("mmseqs search --search-type 3"
             " {output[0]}/query"
             " {output[0]}/target"
             " {output[0]}/mmseqs_out"
             " temp"
             " --threads {threads}"
            f" -s {config['s2_mmseqs_sensitivity']}"
             )
       #   f" {config['s1_mmseqs_sensitivity']} \n" # Add sensitivity setting as f string
       shell("mmseqs convertalis "
             " --format-output \'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen,tlen\'"
             " {output[0]}/query "
             " {output[0]}/target "
             " {output[0]}/mmseqs_out "
             " {output[1]}")

rule blast_stage1_search:
    input:
        path_to_combined_bins,
        config['generic_16s'] # Query
    output:
        directory("blast_stage1_db"),
        "stage1_asvs_blast.tab"
    run:
       shell("mkdir {output[0]}")
       shell("makeblastdb -dbtype nucl -in {input[0]} -out {output[0]}/blast_db")
       shell("blastn -db {output[0]}/blast_db -out {output[1]} -query {input[1]} -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\"")

rule pullseq_header_name:
    input:
        path_to_combined_bins,
        "{level}_asvs_{tool}.tab"
    output:
        "{level}_asvs_{tool}_matches.fna"
    run:
       shell("awk '{{print $2}}' {input[1]} > {wildcards.level}_asvs_{wildcards.tool}_headers.txt")
       headers = pd.read_csv(f"{wildcards.level}_asvs_{wildcards.tool}_headers.txt",
                          sep='\n', header=None, names=["head"])["head"].values
       filter_fasta_from_headers(f"{input[0]}", f"{output}", headers)
       # shell("/usr/local/bin/pullseq_header_name.py -i {input[0]} -o {output} -e F -n {wildcards.level}_asvs_{wildcards.tool}_headers.txt")

rule mmseqs_stage2_search:
    input:
       "barrnap_and_mmseqs_asvs.fna", # Target
       config['asv_seqs_path'] # Query
    output:
       directory("mmseqs_stage2_db"),
       "stage2_asvs_mmseqs.tab"
    threads: workflow.cores
    # Add sensitivity seting as f string
    run:
       shell("mkdir {output[0]}")
       shell("mmseqs createdb {input[0]} {output[0]}/target")
       shell("mmseqs createdb {input[1]} {output[0]}/query")
       shell("mmseqs search --search-type 3"
             " {output[0]}/query"
             " {output[0]}/target"
             " {output[0]}/mmseqs_out"
             " temp"
            f" -s {config['s2_mmseqs_sensitivity']}"
             )
       #   f" {config['s1_mmseqs_sensitivity']} \n" # Add sensitivity setting as f string
       shell("mmseqs convertalis "
             " --format-output \'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen,tlen\'"
             " {output[0]}/query "
             " {output[0]}/target "
             " {output[0]}/mmseqs_out "
             " {output[1]}")

rule blast_stage2_search:
    input:
       "barrnap_and_blast_asvs.fna", # Target
        config['asv_seqs_path'], # Query
    output:
        directory("blast_stage2_db"),
        "stage2_asvs_blast.tab"
    shell:
        """
        mkdir {output[0]}
        makeblastdb -dbtype nucl -in {input[0]} -out {output[0]}/blast_db
        blastn -db {output[0]}/blast_db -out {output[1]} -query {input[1]} \
        -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\"
        """

rule run_barrnap:
    input:
        path_to_combined_bins
    output:
        "barrnap_fastafile-16S.fna"
    threads: workflow.cores
    shell:
        """
        barrnap --threads {threads} {input} > rrna.gff
        grep \"16S\" rrna.gff > 16S-gff.gff
        bedtools getfasta -fi {input} -bed 16S-gff.gff -fo 16S-fasta.fna
        grep \">\" 16S-fasta.fna | sed 's/>//g' > 16S-id.txt
        xargs samtools faidx 16S-fasta.fna < 16S-id.txt > {output}
        """

# rule get_16s_headers_barrnap:
#     input:
#         "16S-fasta.fna"
#     output:
#         "16S-id.txt"
#     shell:
#         "grep \">\" {input} | sed 's/>//g' > {output}"
#
# rule samtools_get_16s_fna:
#     input:
#         "16S-fasta.fna",
#         "16S-id.txt"
#     output:
#         "barrnap_fastafile-16S.fna"
#     shell:
#         "xargs samtools faidx {input[0]} < {input[1]} > {output}"





