"""The snake make file that controls the process, imported by a python warper"""
import os
import glob
import pathlib
from asv_to_bins.extract_16s import combine_blast_barrnap

# !snakemake combine_input_fa --directory '../results/snakemake_test_2/' --config input_fa_folder=/home/projects/16s_to_bins_project/data/salmonella/ input_fna=test.fna --cores 2

# This will eventually move the output file to a designated location
rule all:
    input:
       f"stage2_asvs_{config['tool']}.tab"

rule no_asvs:
    input:
       f"barrnap_and_{config['tool']}_asvs.fna"

# rule copy_output_to_place:
#     input:
#         "combined_16s_from_bins.asv_seqs-mmseqs.fna" if config['mmseqs'] else "combined_16s_from_bins.asv_seqs-blast.fna"
#     output:
#         "all_asv_results.fna"
#     shell:
#         "cp {input} {output}"

rule combine_barrnap_with_other: # where other is blast or mmseqs
    input:
        other_fasta_path = "stage1_asvs_{tool}_matches.fna",
        other_stats_path =  "stage1_asvs_{tool}.tab",
        barrnap_fasta_path = "barrnap_fastafile-16S.fna"
    output:
        out_fasta_path = "barrnap_and_{tool}_asvs.fna"
    run:
        combine_blast_barrnap(input['other_fasta_path'], input['other_stats_path'],
                input['barrnap_fasta_path'], output['out_fasta_path'])

if config['bins_folder'] is not None:
        all_input_bins = glob.glob(os.path.join(config['bins_folder'], "*.fa*"))
rule combine_input_fa:
    input:
        all_input_bins
    output:
        config['all_bin_seqs_path']
    run:
       shell("touch {output}")
       for i in all_input_bins:
           if i.endswith(".fa"):
               shell("cat {i} >> {output}")
           elif i.endswith('.fa.gz'):
               shell("gzip -cd  {i} >> {output}")

rule mmseqs_stage1_search:
    input:
        config['all_bin_seqs_path'],
        config['generic_16s_data'] # Query
    output:
        directory("mmseqs_stage1_db"),
        "stage1_asvs_mmseqs.tab"
    threads: workflow.cores
    shell:
        """
        mkdir {output[0]}
        mmseqs createdb {input[0]} {output[0]}/target
        mmseqs createdb {input[1]} {output[0]}/query
        mmseqs search --search-type 3 \
            {output[0]}/query \
            {output[0]}/target \
            {output[0]}/mmseqs_out temp \
            --threads {threads} -s 7 # Add sensitivity setting as f string
        mmseqs convertalis \
             --format-output 'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen,tlen' \
             {output[0]}/query \
             {output[0]}/target \
             {output[0]}/mmseqs_out \
             {output[1]}
        """
# --delete-all-output
rule blast_stage1_search:
    input:
        config['all_bin_seqs_path'],
        config['generic_16s_data'] # Query
    output:
        directory("blast_stage1_db"),
        "stage1_asvs_blast.tab"
    run:
        shell("mkdir {output[0]}")
        shell("makeblastdb -dbtype nucl -in {input[0]} -out blast_db/blast_db")
        shell("blastn -db {output[0]}/blast_db -out {output[1]} -query {input[1]} \
        -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\"")

rule pullseq_header_name:
    input:
        config['all_bin_seqs_path'],
        "{level}_asvs_{tool}.tab"
    output:
        "{level}_asvs_{tool}_matches.fna"
    run:
        shell("awk '{{print $2}}' {input[1]} > {wildcards.level}_asvs_{wildcards.tool}_headers.txt")
        shell("/usr/local/bin/pullseq_header_name.py -i {input[0]} -o {output} -e F -n {wildcards.level}_asvs_{wildcards.tool}_headers.txt")

rule mmseqs_stage2_search:
    input:
       "barrnap_and_mmseqs_asvs.fna", # Target
       config['asv_seqs_path'] # Query
    output:
       directory("mmseqs_stage2_db"),
       "stage2_asvs_mmseqs.tab"
    threads: workflow.cores
    # Add sensitivity seting as f string
    shell:
       """
       mkdir {output[0]}
       mmseqs createdb {input[0]} {output[0]}/target
       mmseqs createdb {input[1]} {output[0]}/query
       mmseqs search --search-type 3 \
           {output[0]}/query \
           {output[0]}/target \
           {output[0]}/mmseqs_out \
           temp \
           --threads {threads} -s 7
       mmseqs convertalis \
           --format-output 'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen,tlen' \
           {output[0]}/query \
           {output[0]}/target \
           {output[0]}/mmseqs_out \
           {output[1]}
       """

rule blast_stage2_search:
    input:
       "barrnap_and_blast_asvs.fna", # Target
        config['asv_seqs_path'], # Query
    output:
        directory("blast_stage2_db"),
        "stage2_asvs_blast.tab"
    shell:
        """
        mkdir {output[0]}
        makeblastdb -dbtype nucl -in {input[0]} -out blast_db/blast_db
        blastn -db {output[0]}/blast_db -out {output[1]} -query {input[1]} \
        -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen\"
        """

rule run_barrnap:
    input:
        config['all_bin_seqs_path']
    output:
        "barrnap_fastafile-16S.fna"
    threads: workflow.cores
    shell:
        """
        barrnap --threads {threads} {input} > rrna.gff
        grep \"16S\" rrna.gff > 16S-gff.gff
        bedtools getfasta -fi {input} -bed 16S-gff.gff -fo 16S-fasta.fna
        grep \">\" 16S-fasta.fna | sed 's/>//g' > 16S-id.txt
        xargs samtools faidx 16S-fasta.fna < 16S-id.txt > {output}
        """

# rule get_16s_headers_barrnap:
#     input:
#         "16S-fasta.fna"
#     output:
#         "16S-id.txt"
#     shell:
#         "grep \">\" {input} | sed 's/>//g' > {output}"
#
# rule samtools_get_16s_fna:
#     input:
#         "16S-fasta.fna",
#         "16S-id.txt"
#     output:
#         "barrnap_fastafile-16S.fna"
#     shell:
#         "xargs samtools faidx {input[0]} < {input[1]} > {output}"





